variables:
  SCCACHE_CACHE_FOLDER: $(Pipeline.Workspace)/.cache/sccache
  CONTAINER_VERSION: 1.36
trigger:
- master
jobs:
- job: vm_env
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - script: export
      displayName: List variables
    - script: which cargo
      displayName: which cargo
      continueOnError: true
    - script: ls -la $(CARGO_HOME)
      displayName: ls -la $(CARGO_HOME)
      continueOnError: true
- job: build_on_vm
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn: vm_env
  steps:
    - script: echo "$AA"
      enabled: false
    - task: CacheBeta@0
      inputs:
        key: |
          cargo
          $(Agent.OS)
          $(Agent.OSArchitecture)
        path: $(CARGO_CACHE_FOLDER)
      enabled: false
    - script: rustup component add clippy
      displayName: Setup Clippy
    - script: cargo build
      displayName: Build
    - script: cargo clippy
      displayName: Clippy
    - script: rm -rf $(CARGO_HOME)/.cargo/registry/src
      displayName: Reduce cargo cache
- job: bash_env
  pool:
    vmImage: 'ubuntu-16.04'
  container: rust:$(CONTAINER_VERSION)
  steps:
    - script: export
      displayName: List variables
    - script: echo "##vso[task.setvariable variable=val;isOutput=true]$CARGO_HOME"
      name: cargo_home
- job:
  dependsOn: bash_env
  pool:
    vmImage: 'ubuntu-16.04'
  container: rust:$(CONTAINER_VERSION)
  variables:
    AA: $[dependencies.bash_env.outputs['cargo_home.val']]
  steps:
    - script: echo "$AA"
      enabled: false
    - task: CacheBeta@0
      inputs:
        key: |
          cargo
          $(Agent.OS)
          $(Agent.OSArchitecture)
        path: $(CARGO_CACHE_FOLDER)
      enabled: false
    - script: rustup component add clippy
      displayName: Setup Clippy
    - script: cargo build
      displayName: Build
    - script: cargo clippy
      displayName: Clippy
    - script: rm -rf $(CARGO_HOME)/.cargo/registry/src
      displayName: Reduce cargo cache
